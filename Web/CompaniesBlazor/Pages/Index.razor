@page "/"
@inject CompaniesService CompaniesService

<PageTitle>Index</PageTitle>

<div class="container">
	<input class="form-control" @bind="_searchText" @oninput="async (e) => await OnInput(e)"
		placeholder="Enter search text here"/>

	<div class="d-flex justify-content-center pt-4">
		<button class="btn btn-primary @(_pageNumber > 0 ? "" : "disabled")" @onclick="async () => await GoToPreviousPageAsync()">Go back</button>	
		<p class="text-center px-5">Page @(_pageNumber + 1)</p>
		<button class="btn btn-primary @(_hasMore ? "" : "disabled")" @onclick="async () => await GoToNextPageAsync()">Next page</button>
	</div>

	<div class="d-flex justify-content-end">
		<select class="form-control-sm" @onchange="async e => await AdjustPageSize(e)">
			<option value="10" selected>10</option>
			<option value="20">20</option>
			<option value="50">50</option>
			<option value="100">100</option>
		</select>
	</div>
</div>

<br class="pb-4"/>

@if(_customers is not null)
{
	<table class="table">
		<thead>
			<tr>
				<td>First Name</td>
				<td>Last Name</td>
				<td>Email Address</td>
			</tr>
		</thead>
		<tbody>
			<Virtualize Items="_customers">
				<ItemContent>
					<tr>
						<td>@context.FirstName</td>
						<td>@context.LastName</td>
						<td>@context.EmailAddress</td>
					</tr>
				</ItemContent>
			</Virtualize>
		</tbody>
	</table>
}

@code {
	private string _searchText = string.Empty;
	private bool _searchInProgress = false;

	private IList<Customer> _customers = new List<Customer>();
	private bool _hasMore = false;

	private int _pageNumber = 0;
	private int _pageSize = 10;

	protected override async Task OnInitializedAsync()
	{
		await GetCustomersAsync(_searchText);
		await base.OnInitializedAsync();
	}

	private async Task OnInput(ChangeEventArgs e)
	{
		_pageNumber = 0;
		await GetCustomersAsync(e.Value!.ToString());
	}

	private async Task GoToNextPageAsync()
	{
		if (_hasMore)
		{
			_pageNumber += 1;
			await GetCustomersAsync(_searchText);
		}
	}

	private async Task GoToPreviousPageAsync()
	{
		if (_pageNumber > 0)
		{
			_pageNumber -= 1;
			await GetCustomersAsync(_searchText);
		}
	}

	private async Task AdjustPageSize(ChangeEventArgs e)
	{
		_pageSize = Convert.ToInt32(e.Value);
		_pageNumber = 0;
		await GetCustomersAsync(_searchText);
	}

	private async Task GetCustomersAsync(string? searchText)
	{
		if (_searchInProgress) return;

		try
		{
			_searchInProgress = true;

			var response = await CompaniesService.GetCustomerAsync(searchText, _pageNumber, _pageSize);

			if (response is not null)
			{
				_customers.Clear();

				_customers = response.Customers.ToList();
				_hasMore = response.HasMore;
			}
		}
		finally
		{
			_searchInProgress = false;
		}
	}
}